{"ast":null,"code":"import { of } from \"rxjs\";\nimport { HEROES } from \"./mock-heroes\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\"; //Injectable marks the class as one that participates in the dependency injection system\n//HeroService class is going to provide an injectable service -- and it can also have its own\n//injected dependenceies\n//must make service available to the dependency injection system by registering a provider\n\nexport class HeroService {\n  //this is typical service-in-service scenario: you inject the MessageService into the HeroService\n  //which is injected into the HeroesComponent\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n  }\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  } //of(HEROES) returns an Observable<Hero[]> that emits a single value, the array of mock heroes\n\n\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add(\"HeroService: fetched heroes\");\n    return heroes;\n  }\n\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    //getHero has an asynchronous signature\n    //it returns mock hero as an observable, using the RxJS of() function\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/MNash/Desktop/angular-heroes/src/app/hero.service.ts"],"names":["of","HEROES","i0","i1","i2","HeroService","constructor","http","messageService","log","message","add","getHeroes","heroes","getHero","id","hero","find","h","ɵfac","HeroService_Factory","t","ɵɵinject","HttpClient","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB,C,CACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACA;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAOC,cAAP,EAAuB;AAC9B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;;AACDC,EAAAA,GAAG,CAACC,OAAD,EAAU;AACT,SAAKF,cAAL,CAAoBG,GAApB,CAAyB,gBAAeD,OAAQ,EAAhD;AACH,GAToB,CAUrB;;;AACAE,EAAAA,SAAS,GAAG;AACR,UAAMC,MAAM,GAAGb,EAAE,CAACC,MAAD,CAAjB;AACA,SAAKO,cAAL,CAAoBG,GAApB,CAAwB,6BAAxB;AACA,WAAOE,MAAP;AACH;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR;AACA;AACA;AACA;AACA,UAAMC,IAAI,GAAGf,MAAM,CAACgB,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA1B,CAAb;AACA,SAAKP,cAAL,CAAoBG,GAApB,CAAyB,gCAA+BI,EAAG,EAA3D;AACA,WAAOf,EAAE,CAACgB,IAAD,CAAT;AACH;;AAzBoB;;AA2BzBX,WAAW,CAACc,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIhB,WAAV,EAAuBH,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,UAAf,CAAvB,EAAmDrB,EAAE,CAACoB,QAAH,CAAYlB,EAAE,CAACoB,cAAf,CAAnD,CAAP;AAA4F,CAAjJ;;AACAnB,WAAW,CAACoB,KAAZ,GAAoB,aAAcvB,EAAE,CAACwB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,WAAT;AAAsBuB,EAAAA,OAAO,EAAEvB,WAAW,CAACc,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { of } from \"rxjs\";\r\nimport { HEROES } from \"./mock-heroes\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./message.service\";\r\n//Injectable marks the class as one that participates in the dependency injection system\r\n//HeroService class is going to provide an injectable service -- and it can also have its own\r\n//injected dependenceies\r\n//must make service available to the dependency injection system by registering a provider\r\nexport class HeroService {\r\n    //this is typical service-in-service scenario: you inject the MessageService into the HeroService\r\n    //which is injected into the HeroesComponent\r\n    constructor(http, messageService) {\r\n        this.http = http;\r\n        this.messageService = messageService;\r\n    }\r\n    log(message) {\r\n        this.messageService.add(`HeroService: ${message}`);\r\n    }\r\n    //of(HEROES) returns an Observable<Hero[]> that emits a single value, the array of mock heroes\r\n    getHeroes() {\r\n        const heroes = of(HEROES);\r\n        this.messageService.add(\"HeroService: fetched heroes\");\r\n        return heroes;\r\n    }\r\n    ;\r\n    getHero(id) {\r\n        // For now, assume that a hero with the specified `id` always exists.\r\n        // Error handling will be added in the next step of the tutorial.\r\n        //getHero has an asynchronous signature\r\n        //it returns mock hero as an observable, using the RxJS of() function\r\n        const hero = HEROES.find(h => h.id === id);\r\n        this.messageService.add(`HeroService: fetched hero id=${id}`);\r\n        return of(hero);\r\n    }\r\n}\r\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService)); };\r\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}