{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HeroesComponent = class HeroesComponent {\n  //the parameter simultaneously defines a private heroService property and identifies it as a HeroService\n  //injection site\n  //When angular creates a HeroesComponent, the dependency injection system sets the heroService parameter \n  //to the singleton instance of HeroService\n  constructor(heroService, messageService) {\n    this.heroService = heroService;\n    this.messageService = messageService;\n    this.heroes = [];\n  } //ngOnIt is a lifecycle hook.  Angular calls ngOnIt shortly after creating a component\n  //it's a good place to put initialization logic\n\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero) {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  } //Observable.subscribe for when making request to remote server\n  //waits for observvable to emit the array of heroes - which could happen now\n  //or several minutes from now\n  //the subscribe() method passes the emitted array to the callback, which sets the component's\n  //heroes property\n  //asynchronous approach\n\n\n  getHeroes() {\n    this.heroService.getHeroes().subscribe(heroes => this.heroes = heroes);\n  }\n\n};\nHeroesComponent = __decorate([Component({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})], HeroesComponent);\nexport { HeroesComponent };","map":{"version":3,"sources":["C:/Users/MNash/Desktop/angular-heroes/src/app/heroes/heroes.component.ts"],"names":["__decorate","Component","HeroesComponent","constructor","heroService","messageService","heroes","ngOnInit","getHeroes","onSelect","hero","selectedHero","add","id","subscribe","selector","templateUrl","styleUrls"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,IAAIC,eAAe,GAAG,MAAMA,eAAN,CAAsB;AACxC;AACA;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,WAAD,EAAcC,cAAd,EAA8B;AACrC,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,MAAL,GAAc,EAAd;AACH,GATuC,CAUxC;AACA;;;AACAC,EAAAA,QAAQ,GAAG;AACP,SAAKC,SAAL;AACH;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,SAAKC,YAAL,GAAoBD,IAApB;AACA,SAAKL,cAAL,CAAoBO,GAApB,CAAyB,qCAAoCF,IAAI,CAACG,EAAG,EAArE;AACH,GAlBuC,CAmBxC;AACA;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,SAAS,GAAG;AACR,SAAKJ,WAAL,CAAiBI,SAAjB,GACKM,SADL,CACeR,MAAM,IAAI,KAAKA,MAAL,GAAcA,MADvC;AAEH;;AA5BuC,CAA5C;AA8BAJ,eAAe,GAAGF,UAAU,CAAC,CACzBC,SAAS,CAAC;AACNc,EAAAA,QAAQ,EAAE,YADJ;AAENC,EAAAA,WAAW,EAAE,yBAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,wBAAD;AAHL,CAAD,CADgB,CAAD,EAMzBf,eANyB,CAA5B;AAOA,SAASA,eAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nlet HeroesComponent = class HeroesComponent {\r\n    //the parameter simultaneously defines a private heroService property and identifies it as a HeroService\r\n    //injection site\r\n    //When angular creates a HeroesComponent, the dependency injection system sets the heroService parameter \r\n    //to the singleton instance of HeroService\r\n    constructor(heroService, messageService) {\r\n        this.heroService = heroService;\r\n        this.messageService = messageService;\r\n        this.heroes = [];\r\n    }\r\n    //ngOnIt is a lifecycle hook.  Angular calls ngOnIt shortly after creating a component\r\n    //it's a good place to put initialization logic\r\n    ngOnInit() {\r\n        this.getHeroes();\r\n    }\r\n    onSelect(hero) {\r\n        this.selectedHero = hero;\r\n        this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\r\n    }\r\n    //Observable.subscribe for when making request to remote server\r\n    //waits for observvable to emit the array of heroes - which could happen now\r\n    //or several minutes from now\r\n    //the subscribe() method passes the emitted array to the callback, which sets the component's\r\n    //heroes property\r\n    //asynchronous approach\r\n    getHeroes() {\r\n        this.heroService.getHeroes()\r\n            .subscribe(heroes => this.heroes = heroes);\r\n    }\r\n};\r\nHeroesComponent = __decorate([\r\n    Component({\r\n        selector: 'app-heroes',\r\n        templateUrl: './heroes.component.html',\r\n        styleUrls: ['./heroes.component.css']\r\n    })\r\n], HeroesComponent);\r\nexport { HeroesComponent };\r\n"]},"metadata":{},"sourceType":"module"}